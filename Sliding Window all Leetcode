Sliding Window all questions :


Substrings of Size Three with Distinct Characters
Easy


class Solution {
public:
    int countGoodSubstrings(string s) {
       if(s.size()<3)return 0;
        char a=s[0],b=s[1],c=s[2];
        int res=0;
        for(int i=3;i<=s.size()-1;i++)
        {
            if(a!=b and b!=c and c!=a)res++;
            a=b;
            b=c;
            c=s[i];
        }
        if(a!=b and b!=c and c!=a)res++;
        return res;
    }
};

Longest Nice Substring


if (s.size() < 2) return "";
        unordered_set<char> ck(begin(s), end(s));
        for (int i = 0; i < s.size(); i++) {
            if (ck.find((char) toupper(s[i])) == end(ck) or ck.find((char) tolower(s[i])) == end(ck)) {
                string s1 = longestNiceSubstring(s.substr(0, i));
                string s2 = longestNiceSubstring(s.substr(i + 1));
                return s1.size() >= s2.size() ? s1 : s2;
            }
        }
        return s;
        }
        
        
        Diet Plan Performance
        
        
        class Solution {
public:
    int dietPlanPerformance(vector<int>& c, int k, int lower, int upper) {
        int count = 0, sum = 0, res = 0;
        
        for(int i = 0; i < c.size(); i++){
            sum += c[i];
            count++;
            if(count == k){
                if(sum > upper) res++;
                else if(sum < lower) res--;
                count--;
                sum = sum - c[i-k+1];
            }
        }
        return res;
    }
};

min swaps to make ones together


class Solution {
public:

int minSwaps(vector<int> &a) {
    int n=a.size();
    
    int k=0;
    for(int i=0;i<n;i++)  k += (a[i]==1);
    
    a.insert(a.end(), a.begin(), a.end()); // doubling the size of array as it is circular
    
    int ans=n;
    
    int i=0, j=0, one=0;
    while(j<2*n){
        one += (a[j]==1);
        
        if(j-i+1 == k){
            ans = min(ans,k-one); // k-one will number of swaps required to make all elements of window sized 'k' as 1
            one -= (a[i]==1);
            
            i++;
        }
        j++;
    }
    
    return (ans==n ? 0:ans);
}
};

// get average

class Solution {
public:
    vector<int> getAverages(vector<int>& A, int k) {
        long N = A.size(), len = 2 * k + 1, sum = 0; // `len` is the length of the window
        vector<int> ans(N, -1);
        if (N < len) return ans; // If the array is too short to cover a window, return all -1s
        for (int i = 0; i < N; ++i) {
            sum += A[i]; // push A[i] into the window
            if (i - len >= 0) sum -= A[i - len]; // pop A[i-len], if any, out of window
            if (i >= len - 1) ans[i - k] = sum / len; // the center of this window is at `i-k`
        }
        return ans;
    }
};
